// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FieldType int32

const (
	FieldType_typeInt32    FieldType = 0
	FieldType_typeInt64    FieldType = 1
	FieldType_typeFloat32  FieldType = 2
	FieldType_typeFloat64  FieldType = 3
	FieldType_typeBool     FieldType = 4
	FieldType_typeString   FieldType = 5
	FieldType_typeClass    FieldType = 6
	FieldType_typeEnum     FieldType = 7
	FieldType_typeDateTime FieldType = 8
	FieldType_typeColor    FieldType = 9
)

var FieldType_name = map[int32]string{
	0: "typeInt32",
	1: "typeInt64",
	2: "typeFloat32",
	3: "typeFloat64",
	4: "typeBool",
	5: "typeString",
	6: "typeClass",
	7: "typeEnum",
	8: "typeDateTime",
	9: "typeColor",
}
var FieldType_value = map[string]int32{
	"typeInt32":    0,
	"typeInt64":    1,
	"typeFloat32":  2,
	"typeFloat64":  3,
	"typeBool":     4,
	"typeString":   5,
	"typeClass":    6,
	"typeEnum":     7,
	"typeDateTime": 8,
	"typeColor":    9,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ConfigType int32

const (
	ConfigType_typeList ConfigType = 0
	ConfigType_typeMap  ConfigType = 1
)

var ConfigType_name = map[int32]string{
	0: "typeList",
	1: "typeMap",
}
var ConfigType_value = map[string]int32{
	"typeList": 0,
	"typeMap":  1,
}

func (x ConfigType) String() string {
	return proto.EnumName(ConfigType_name, int32(x))
}
func (ConfigType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ConfigLine struct {
	Content []string `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
}

func (m *ConfigLine) Reset()                    { *m = ConfigLine{} }
func (m *ConfigLine) String() string            { return proto.CompactTextString(m) }
func (*ConfigLine) ProtoMessage()               {}
func (*ConfigLine) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ConfigLine) GetContent() []string {
	if m != nil {
		return m.Content
	}
	return nil
}

type ConfigContent struct {
	Content []*ConfigLine `protobuf:"bytes,1,rep,name=content" json:"content,omitempty"`
}

func (m *ConfigContent) Reset()                    { *m = ConfigContent{} }
func (m *ConfigContent) String() string            { return proto.CompactTextString(m) }
func (*ConfigContent) ProtoMessage()               {}
func (*ConfigContent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ConfigContent) GetContent() []*ConfigLine {
	if m != nil {
		return m.Content
	}
	return nil
}

type ConfigFieldInfo struct {
	Name      string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type      FieldType `protobuf:"varint,2,opt,name=type,enum=config.FieldType" json:"type,omitempty"`
	IsList    bool      `protobuf:"varint,3,opt,name=isList" json:"isList,omitempty"`
	Parameter string    `protobuf:"bytes,4,opt,name=parameter" json:"parameter,omitempty"`
}

func (m *ConfigFieldInfo) Reset()                    { *m = ConfigFieldInfo{} }
func (m *ConfigFieldInfo) String() string            { return proto.CompactTextString(m) }
func (*ConfigFieldInfo) ProtoMessage()               {}
func (*ConfigFieldInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ConfigFieldInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigFieldInfo) GetType() FieldType {
	if m != nil {
		return m.Type
	}
	return FieldType_typeInt32
}

func (m *ConfigFieldInfo) GetIsList() bool {
	if m != nil {
		return m.IsList
	}
	return false
}

func (m *ConfigFieldInfo) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

type ConfigEnumElementInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigEnumElementInfo) Reset()                    { *m = ConfigEnumElementInfo{} }
func (m *ConfigEnumElementInfo) String() string            { return proto.CompactTextString(m) }
func (*ConfigEnumElementInfo) ProtoMessage()               {}
func (*ConfigEnumElementInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ConfigEnumElementInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigEnumElementInfo) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ConfigEnumInfo struct {
	Name  string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []*ConfigEnumElementInfo `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *ConfigEnumInfo) Reset()                    { *m = ConfigEnumInfo{} }
func (m *ConfigEnumInfo) String() string            { return proto.CompactTextString(m) }
func (*ConfigEnumInfo) ProtoMessage()               {}
func (*ConfigEnumInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ConfigEnumInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigEnumInfo) GetValue() []*ConfigEnumElementInfo {
	if m != nil {
		return m.Value
	}
	return nil
}

type ConfigTable struct {
	Type          ConfigType         `protobuf:"varint,1,opt,name=type,enum=config.ConfigType" json:"type,omitempty"`
	KeyFieldName  string             `protobuf:"bytes,2,opt,name=keyFieldName" json:"keyFieldName,omitempty"`
	FieldInfoList []*ConfigFieldInfo `protobuf:"bytes,3,rep,name=fieldInfoList" json:"fieldInfoList,omitempty"`
	EnumInfoList  []*ConfigEnumInfo  `protobuf:"bytes,4,rep,name=enumInfoList" json:"enumInfoList,omitempty"`
	Content       []*ConfigLine      `protobuf:"bytes,5,rep,name=content" json:"content,omitempty"`
}

func (m *ConfigTable) Reset()                    { *m = ConfigTable{} }
func (m *ConfigTable) String() string            { return proto.CompactTextString(m) }
func (*ConfigTable) ProtoMessage()               {}
func (*ConfigTable) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ConfigTable) GetType() ConfigType {
	if m != nil {
		return m.Type
	}
	return ConfigType_typeList
}

func (m *ConfigTable) GetKeyFieldName() string {
	if m != nil {
		return m.KeyFieldName
	}
	return ""
}

func (m *ConfigTable) GetFieldInfoList() []*ConfigFieldInfo {
	if m != nil {
		return m.FieldInfoList
	}
	return nil
}

func (m *ConfigTable) GetEnumInfoList() []*ConfigEnumInfo {
	if m != nil {
		return m.EnumInfoList
	}
	return nil
}

func (m *ConfigTable) GetContent() []*ConfigLine {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfigLine)(nil), "config.ConfigLine")
	proto.RegisterType((*ConfigContent)(nil), "config.ConfigContent")
	proto.RegisterType((*ConfigFieldInfo)(nil), "config.ConfigFieldInfo")
	proto.RegisterType((*ConfigEnumElementInfo)(nil), "config.ConfigEnumElementInfo")
	proto.RegisterType((*ConfigEnumInfo)(nil), "config.ConfigEnumInfo")
	proto.RegisterType((*ConfigTable)(nil), "config.ConfigTable")
	proto.RegisterEnum("config.FieldType", FieldType_name, FieldType_value)
	proto.RegisterEnum("config.ConfigType", ConfigType_name, ConfigType_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x9e, 0xdb, 0xf4, 0x47, 0x5e, 0xd2, 0xce, 0x3c, 0xc1, 0xc8, 0x01, 0xa4, 0x28, 0x12, 0x23,
	0x9a, 0xd0, 0x0e, 0xed, 0xb4, 0x03, 0xd2, 0x0e, 0x50, 0x36, 0x69, 0xd2, 0xe0, 0x10, 0x7a, 0xe1,
	0xe8, 0x0d, 0x77, 0x8a, 0x70, 0xec, 0x28, 0xf1, 0x90, 0x7a, 0xdd, 0x3f, 0xc3, 0xbf, 0x89, 0x6c,
	0x27, 0x4d, 0x33, 0x34, 0x71, 0xf3, 0xf7, 0xfc, 0xbe, 0xcf, 0xdf, 0xfb, 0x6c, 0x43, 0x78, 0xa7,
	0xe4, 0x26, 0xbf, 0x3f, 0x2d, 0x2b, 0xa5, 0x15, 0x8e, 0x1d, 0x4a, 0x8e, 0x01, 0x56, 0x76, 0x75,
	0x93, 0x4b, 0x8e, 0x11, 0x4c, 0xee, 0x94, 0xd4, 0x5c, 0xea, 0x88, 0xc4, 0xc3, 0xd4, 0xcf, 0x5a,
	0x98, 0x5c, 0xc0, 0xcc, 0xf5, 0xad, 0x5c, 0x01, 0x3f, 0xf4, 0x5b, 0x83, 0x05, 0x9e, 0x36, 0x07,
	0x74, 0x7a, 0x1d, 0xfd, 0x91, 0xc0, 0xa1, 0xab, 0x5f, 0xe5, 0x5c, 0xfc, 0xbc, 0x96, 0x1b, 0x85,
	0x08, 0x9e, 0x64, 0x05, 0x8f, 0x48, 0x4c, 0x52, 0x3f, 0xb3, 0x6b, 0x7c, 0x07, 0x9e, 0xde, 0x96,
	0x3c, 0x1a, 0xc4, 0x24, 0x9d, 0x2f, 0x5e, 0xb4, 0x92, 0x96, 0xb4, 0xde, 0x96, 0x3c, 0xb3, 0xdb,
	0x78, 0x04, 0xe3, 0xbc, 0xbe, 0xc9, 0x6b, 0x1d, 0x0d, 0x63, 0x92, 0x4e, 0xb3, 0x06, 0xe1, 0x1b,
	0xf0, 0x4b, 0x56, 0xb1, 0x82, 0x6b, 0x5e, 0x45, 0x9e, 0xd5, 0xed, 0x0a, 0xc9, 0x27, 0x78, 0xe5,
	0x3c, 0x5c, 0xca, 0x87, 0xe2, 0x52, 0xf0, 0x82, 0x4b, 0xfd, 0xac, 0x93, 0x97, 0x30, 0xfa, 0xcd,
	0xc4, 0x83, 0xb3, 0x32, 0xca, 0x1c, 0x48, 0x7e, 0xc0, 0xbc, 0x93, 0x78, 0x96, 0xbb, 0xec, 0xb8,
	0x26, 0x99, 0xb7, 0xfd, 0x64, 0x9e, 0x9c, 0xde, 0x4a, 0x3f, 0x0e, 0x20, 0x70, 0x0d, 0x6b, 0x76,
	0x2b, 0x38, 0x1e, 0x37, 0x51, 0x10, 0x1b, 0xc5, 0x93, 0x74, 0xf7, 0xb2, 0x48, 0x20, 0xfc, 0xc5,
	0xb7, 0x36, 0xa1, 0x6f, 0xc6, 0xc8, 0xc0, 0x1a, 0xe9, 0xd5, 0xf0, 0x02, 0x66, 0x9b, 0x36, 0xf7,
	0x26, 0x36, 0x63, 0xec, 0x75, 0x5f, 0x74, 0x77, 0x35, 0x59, 0xbf, 0x1b, 0x3f, 0x42, 0xc8, 0x9b,
	0x79, 0x2d, 0xdb, 0xb3, 0xec, 0xa3, 0x7f, 0xc7, 0xb2, 0xe4, 0x5e, 0xef, 0xfe, 0x3b, 0x19, 0xfd,
	0xf7, 0x9d, 0x9c, 0xfc, 0x21, 0xe0, 0xef, 0x2e, 0x1b, 0x67, 0xe0, 0x9b, 0x11, 0xaf, 0xa5, 0x5e,
	0x2e, 0xe8, 0xc1, 0x1e, 0x3c, 0x3f, 0xa3, 0x04, 0x0f, 0x21, 0x30, 0xf0, 0x4a, 0x28, 0x66, 0xf6,
	0x07, 0xbd, 0xc2, 0xf9, 0x19, 0x1d, 0x62, 0x08, 0x53, 0x53, 0xf8, 0xac, 0x94, 0xa0, 0x1e, 0xce,
	0x01, 0x0c, 0xfa, 0xae, 0xab, 0x5c, 0xde, 0xd3, 0x51, 0x2b, 0xb7, 0x12, 0xac, 0xae, 0xe9, 0xb8,
	0x6d, 0x36, 0x63, 0xd0, 0x09, 0x52, 0x08, 0x0d, 0xfa, 0xc2, 0x34, 0x5f, 0xe7, 0x05, 0xa7, 0xd3,
	0x5d, 0xbb, 0x12, 0xaa, 0xa2, 0xfe, 0xc9, 0xfb, 0xf6, 0xe3, 0x58, 0xa7, 0x0d, 0xd9, 0x4c, 0x4c,
	0x0f, 0x30, 0x80, 0x89, 0x41, 0x5f, 0x59, 0x49, 0xc9, 0xed, 0xd8, 0x7e, 0xb8, 0xe5, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x22, 0x4c, 0x80, 0x06, 0x80, 0x03, 0x00, 0x00,
}

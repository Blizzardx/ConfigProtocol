package exportTool

import (
	"github.com/Blizzardx/ConfigProtocol/common"
	"github.com/Blizzardx/ConfigProtocol/define"
)

const codeTemplate_JavaMapClass = `// Generated by gen-tool
// DO NOT EDIT!
package {{.PackageName}};
import java.util.*;

public class {{.ConfigName}}
{
    public HashMap<{{.MapKeyType}},{{.ConfigName}}Info> Content;
}
`
const codeTemplate_JavaListClass = `// Generated by gen-tool
// DO NOT EDIT!
package {{.PackageName}};
import java.util.*;

public class {{.ConfigName}}
{
    public ArrayList<{{.ConfigName}}Info> Content;
}
`
const codeTemplate_JavaLineClass = `// Generated by gen-tool
// DO NOT EDIT!
package {{.PackageName}};
import java.awt.*;
import java.util.*;

public class {{.ConfigName}}Info
{
{{range .FieldList}}
	public {{.Type}} {{.Name}};
{{end}}
}
`

const codeTemplate_JavaEnumClass = `// Generated by gen-tool
// DO NOT EDIT!
package {{.PackageName}};

public enum {{.ConfigName}}{{.EnumName}}
{
{{range .EnumElemList}}
	{{.EnumElemName}} ({{.EnumElemValue}}) ,
{{end}}
    ;
    private final int value;

    private {{.ConfigName}}{{.EnumName}}(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public static {{.ConfigName}}{{.EnumName}} getEnum(int value){
        for(int i=0;i<{{.ConfigName}}{{.EnumName}}.values().length;++i){
            if({{.ConfigName}}{{.EnumName}}.values()[i].getValue() == value){
                return {{.ConfigName}}{{.EnumName}}.values()[i];
            }
        }
        return null;
    }
}
`

type genRuntimeCodeTool_Java struct {
}

func (self *genRuntimeCodeTool_Java) GenRuntimeCode(outputPath string, provision *ConfigDefine, enumInfo []*EnumDefine) error {
	for _, field := range provision.FieldList {
		// check type is enum
		if ok, enumInfo := checkFieldIsInEnumWithName(field.Type); ok {
			field.Type = provision.ConfigName + enumInfo.Name
		} else {
			field.Type = self.convertToSelfType(field.Type)
		}
		if field.IsList {
			field.Type = "ArrayList<" + field.Type + ">"
		}
	}
	var content string
	var err error

	if provision.MapKeyType != "" {
		provision.MapKeyType = self.convertToSelfType(provision.MapKeyType)
		content, err = generateCode(codeTemplate_JavaMapClass, provision, false)
		if err != nil {
			return err
		}
	} else {
		content, err = generateCode(codeTemplate_JavaListClass, provision, false)
		if err != nil {
			return err
		}
	}

	common.EnsureFolder(outputPath + "/Java/")
	err = common.WriteFileByName(outputPath+"/Java/"+provision.ConfigName+".java", []byte(content))

	lineContent, err := generateCode(codeTemplate_JavaLineClass, provision, false)
	if err != nil {
		return err
	}
	err = common.WriteFileByName(outputPath+"/Java/"+provision.ConfigName+"Info.java", []byte(lineContent))

	if len(enumInfo) > 0 {
		// gen enum java class
		for _, enum := range enumInfo {
			enum.PackageName = provision.PackageName
			enumContentElement, err := generateCode(codeTemplate_JavaEnumClass, enum, false)
			if err != nil {
				return err
			}
			err = common.WriteFileByName(outputPath+"/Java/"+provision.ConfigName+enum.EnumName+".java", []byte(enumContentElement))
		}
	}
	return err
}
func (self *genRuntimeCodeTool_Java) Name() define.SupportLan {
	return define.SupportLan_Java
}

func (self *genRuntimeCodeTool_Java) convertToSelfType(fieldType string) string {
	switch fieldType {
	case "int32":
		return "Integer"
	case "int64":
		return "Long"
	case "float32":
		return "Float"
	case "float64":
		return "Double"
	case "bool":
		return "Boolean"
	case "string":
		return "String"
	case "class":
		return "int32"
	case "time":
		return "Date"
	case "color":
		return "Color"
	default:
		return "int32"
	}
}

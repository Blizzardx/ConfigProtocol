package exportTool

import (
	"github.com/Blizzardx/ConfigProtocol/common"
	"github.com/Blizzardx/ConfigProtocol/define"
)

const codeTemplate_Go = `// Generated by gen-tool
// DO NOT EDIT!
package {{.PackageName}}

type {{.ConfigName}} struct {
	Content []*{{.ConfigName}}Info
}
type {{.ConfigName}}Info struct {
{{range .FieldList}}
	{{.Name}} {{.Type}}
{{end}}
}
`

type genRuntimeCodeTool_Go struct {
}

func (self *genRuntimeCodeTool_Go) GenRuntimeCode(outputPath string, provision *ConfigDefine) error {

	for _, field := range provision.FieldList {
		field.Type = self.convertToSelfType(field.Type)
		if field.IsList {
			field.Type = "[]" + field.Type
		}
	}
	content, err := generateCode(codeTemplate_Go, provision, true)
	if err != nil {
		return err
	}
	common.EnsureFolder(outputPath + "/Go/")

	err = common.WriteFileByName(outputPath+"/Go/"+provision.ConfigName+".go", []byte(content))

	return err
}
func (self *genRuntimeCodeTool_Go) Name() define.SupportLan {
	return define.SupportLan_Go
}
func (self *genRuntimeCodeTool_Go) convertToSelfType(fieldType string) string {
	switch fieldType {
	case "int32":
		return "int32"
	case "int64":
		return "int64"
	case "float32":
		return "float32"
	case "float64":
		return "float64"
	case "bool":
		return "bool"
	case "string":
		return "string"
	case "class":
		return "int32"
	default:
		return "int32"
	}
}

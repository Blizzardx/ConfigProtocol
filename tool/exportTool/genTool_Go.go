package exportTool

import (
	"github.com/Blizzardx/ConfigProtocol/common"
	"github.com/Blizzardx/ConfigProtocol/define"
)

const codeTemplate_Go = `// Generated by gen-tool
// DO NOT EDIT!
package {{.PackageName}}

{{.EnumInfoTemplate}}

type {{.ConfigName}} struct {
	Content []*{{.ConfigName}}Info
}
type {{.ConfigName}}Info struct {
{{range .FieldList}}
	{{.Name}} {{.Type}}
{{end}}
}


`
const codeTemplate_GoEnum = `

type {{.ConfigName}}{{.EnumName}} int32

const (
{{range .EnumElemList}}
	{{.ConfigName}}{{.EnumName}}_{{.EnumElemName}} {{.ConfigName}}{{.EnumName}} = {{.EnumElemValue}}
{{end}}
)


`

type genRuntimeCodeTool_Go struct {
}

func (self *genRuntimeCodeTool_Go) GenRuntimeCode(outputPath string, provision *ConfigDefine, enumInfo []*EnumDefine) error {

	enumContent := ""
	for _, enum := range enumInfo {
		enumContentElement, err := generateCode(codeTemplate_GoEnum, enum, false)
		if err != nil {
			return err
		}
		enumContent += enumContentElement
	}
	for _, field := range provision.FieldList {
		// check type is enum

		if ok, enumInfo := checkFieldIsInEnumWithName(field.Type); ok {
			field.Type = provision.ConfigName + enumInfo.Name
		} else {
			field.Type = self.convertToSelfType(field.Type)
		}
		if field.IsList {
			field.Type = "[]" + field.Type
		}
	}
	provision.EnumInfoTemplate = enumContent

	content, err := generateCode(codeTemplate_Go, provision, true)
	if err != nil {
		return err
	}
	common.EnsureFolder(outputPath + "/Go/")

	err = common.WriteFileByName(outputPath+"/Go/"+provision.ConfigName+".go", []byte(content))

	return err
}
func (self *genRuntimeCodeTool_Go) Name() define.SupportLan {
	return define.SupportLan_Go
}
func (self *genRuntimeCodeTool_Go) convertToSelfType(fieldType string) string {
	switch fieldType {
	case "int32":
		return "int32"
	case "int64":
		return "int64"
	case "float32":
		return "float32"
	case "float64":
		return "float64"
	case "bool":
		return "bool"
	case "string":
		return "string"
	case "class":
		return "int32"
	default:
		return "int32"
	}
}
